
 CREATE TABLE IF NOT EXISTS PUBLIC.FILMS (
    FILM_ID INTEGER AUTO_INCREMENT NOT NULL,
    FILM_NAME CHARACTER VARYING(100) NOT NULL,
    DESCRIPTION CHARACTER VARYING(255),
	RELEASE_DATE DATE,
	DURATION INTEGER,
	GENRE CHARACTER VARYING(100),
	RATING CHARACTER VARYING(10),
	CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID)
);

CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
	USER_ID INTEGER NOT NULL AUTO_INCREMENT,
	EMAIL CHARACTER VARYING(100) NOT NULL,
	LOGIN CHARACTER VARYING(30) NOT NULL,
	NAME CHARACTER VARYING(30),
	BIRTHDAY DATE,
	CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);

CREATE TABLE IF NOT EXISTS PUBLIC.LIKES (
	FILM_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	CONSTRAINT LIKES_FK   FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) ON DELETE CASCADE ON UPDATE RESTRICT,
	CONSTRAINT LIKES_FK_1 FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE ON UPDATE RESTRICT,
	CONSTRAINT LIKES_PK   PRIMARY KEY (FILM_ID,USER_ID)
);

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDS (
	USER_ID INTEGER NOT NULL,
	FRIEND_ID INTEGER NOT NULL,
	STATUS BOOLEAN DEFAULT FALSE NOT NULL,
	CONSTRAINT FRIENDS_FK   FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE ON UPDATE RESTRICT,
	CONSTRAINT FRIENDS_FK_1 FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE ON UPDATE RESTRICT,
	CONSTRAINT FRIENDS_PK PRIMARY KEY (USER_ID,FRIEND_ID),
	CHECK (USER_ID != FRIEND_ID)
);
